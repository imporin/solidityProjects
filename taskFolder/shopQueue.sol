
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract shopQueue {
    // State variable storing the name of people who is standing on queue,
	string[] public peopleName;

	constructor() public {
		// check that contract's public key is set
		require(tvm.pubkey() != 0, 101);
		// Check that message has signature (msg.pubkey() is not zero) and message is signed with the owner's private key
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
	}

	// Modifier that allows to accept some external messages
	modifier checkOwnerAndAccept {
		// Check that message was signed with contracts key.
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}
    

	// Function that let people to stand on the end of queue.
	function getInQueue(string name) public checkOwnerAndAccept {
		peopleName.push(name);
	}

    function getOutQueue() public checkOwnerAndAccept {
        require(!peopleName.empty(), 155, "Queue is empty");
		delete peopleName[0];
        for (uint i = 0; i + 1 < peopleName.length; ++i){
            peopleName[i] = peopleName[i + 1];
        }
        peopleName.pop();
	}

}
