
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract shopQueue {
    // Structure that stores the task list
	struct task {
        string taskName;
        uint32 timestamp;
        bool completeFlag;
    }
    
    mapping (int8=>task) public taskList;

    int8 public counter = 0;

	constructor() public {
		// check that contract's public key is set
		require(tvm.pubkey() != 0, 101);
		// Check that message has signature (msg.pubkey() is not zero) and message is signed with the owner's private key
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
	}

	// Modifier that allows to accept some external messages
	modifier checkOwnerAndAccept {
		// Check that message was signed with contracts key.
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}
    

	// Function that adds a task to list
	function addTask(string name) public checkOwnerAndAccept {
		require(name != "", 300, "Task name cannot be empty");
        task t = task(name, now, false);
        taskList.add(counter, t);
        counter++;
	}

    // Function that shows count of open tasks
    function showCount() public view returns(int8) {
        int8 openTasks;
        for (int8 i = 0; i <= counter; i++)
        {
            if(taskList[i].taskName != "" && taskList[i].completeFlag == false)
                openTasks++;
        }
        return openTasks;
	}

    // Function that shows open tasks list
    function showTasks() public view returns(string[]) {
         string[] result;
        if(counter == 0 && taskList[0].taskName == "")
        result.push("There are zero open tasks");
        else
        for (int8 i = 0; i <= counter; i++)
        {
            if(taskList[i].taskName != "" && taskList[i].completeFlag == false)
                result.push(taskList[i].taskName);
        }
        return result;
	}

    // Function that shows task decription by key
    function showTaskByKey(int8 key) public view returns (string, uint32, string) {
        require(key>=0, 199, "key cannot be a negative number");
        require(taskList[key].taskName != "", 299, "there is no task with this key");
        string result;
        result = taskList[key].completeFlag == false? "не выполнена": "выполнена";
        return (taskList[key].taskName, taskList[key].timestamp, result);
	}

    // Function that delete some task by key
    function deleteTask(int8 key) public checkOwnerAndAccept {
        require(key>=0, 199, "key cannot be a negative number");
        require(taskList[key].taskName != "", 299, "there is no task with this key");
        delete taskList[key];
    }

    // Function that mark task as complete by key
    function completeTask(int8 key) public checkOwnerAndAccept {
        require(key>=0, 199, "key cannot be a negative number");
        require(taskList[key].taskName != "", 299, "there is no task with this key");
        require(taskList[key].completeFlag!=true, 399, "this task is already marked as complete");
        taskList[key].completeFlag = true;
    }

}
